using System;
using System.Collections.Generic;

// Enum for vehicle types
public enum VehicleType
{
    Car,
    Truck,
    Motorcycle
}

// Enum for spot sizes
public enum SpotSize
{
    Compact,
    Regular,
    Large,
    Motorcycle
}

// Class representing a parking spot
public class Spot
{
    public SpotSize Size { get; set; }
    public bool IsAvailable { get; set; }

    public Spot(SpotSize size)
    {
        Size = size;
        IsAvailable = true;
    }
}

// Base class for all vehicles
public abstract class Vehicle
{
    public VehicleType Type { get; set; }
    public SpotSize Size { get; set; }

    public abstract void Park();
    public abstract void LeaveSpot();
}

// Derived classes for specific vehicle types
public class Car : Vehicle
{
    public Car()
    {
        Type = VehicleType.Car;
        Size = SpotSize.Compact;
    }

    public override void Park()
    {
        Console.WriteLine("Car parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Car left the spot.");
    }
}

public class Truck : Vehicle
{
    public Truck()
    {
        Type = VehicleType.Truck;
        Size = SpotSize.Large;
    }

    public override void Park()
    {
        Console.WriteLine("Truck parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Truck left the spot.");
    }
}

public class Motorcycle : Vehicle
{
    public Motorcycle()
    {
        Type = VehicleType.Motorcycle;
        Size = SpotSize.Motorcycle;
    }

    public override void Park()
    {
        Console.WriteLine("Motorcycle parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Motorcycle left the spot.");
    }
}

// Class representing a row in a level
public class Row
{
    public List<Spot> Spots { get; set; }

    public Row(int numberOfSpots)
    {
        Spots = new List<Spot>();
        for (int i = 0; i < numberOfSpots; i++)
        {
            Spots.Add(new Spot(SpotSize.Regular));
        }
    }
}

// Class representing a level in the parking lot
public class Level
{
    public List<Row> Rows { get; set; }
    public int AvailableSpots { get; set; }

    public Level(int numberOfRows, int spotsPerRow)
    {
        Rows = new List<Row>();
        for (int i = 0; i < numberOfRows; i++)
        {
            Rows.Add(new Row(spotsPerRow));
        }
        AvailableSpots = numberOfRows * spotsPerRow;
    }
}

// Class representing the parking lot
public class ParkingLot
{
    public List<Level> Levels { get; set; }

    public ParkingLot(int numberOfLevels, int numberOfRows, int spotsPerRow)
    {
        Levels = new List<Level>();
        for (int i = 0; i < numberOfLevels; i++)
        {
            Levels.Add(new Level(numberOfRows, spotsPerRow));
        }
    }

    public Spot FindSpot(Vehicle vehicle)
    {
        foreach (var level in Levels)
        {
            foreach (var row in level.Rows)
            {
                foreach (var spot in row.Spots)
                {
                    // Check if spot is available and large enough for the vehicle
                    if (spot.IsAvailable && CanFit(vehicle.Size, spot.Size))
                    {
                        return spot;
                    }
                }
            }
        }
        return null;
    }

    private bool CanFit(SpotSize vehicleSize, SpotSize spotSize)
    {
        // Logic to determine if the vehicle can fit in the spot
        if (vehicleSize == SpotSize.Compact && (spotSize == SpotSize.Compact || spotSize == SpotSize.Regular))
        {
            return true;
        }
        else if (vehicleSize == SpotSize.Regular && spotSize != SpotSize.Large)
        {
            return true;
        }
        else if (vehicleSize == SpotSize.Large && spotSize == SpotSize.Large)
        {
            return true;
        }
        else if (vehicleSize == SpotSize.Motorcycle && (spotSize == SpotSize.Compact || spotSize == SpotSize.Regular || spotSize == SpotSize.Motorcycle))
        {
            return true;
        }
        return false;
    }
}
class Program
{
    static void Main(string[] args)
    {
        // Create parking lot
        Console.WriteLine("Enter the number of levels in the parking lot:");
        int numberOfLevels = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter the number of rows per level:");
        int numberOfRows = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter the number of spots per row:");
        int spotsPerRow = int.Parse(Console.ReadLine());

        ParkingLot parkingLot = new ParkingLot(numberOfLevels, numberOfRows, spotsPerRow);

        // Simulate parking a vehicle
        Console.WriteLine("Enter the type of vehicle (Car, Truck, Motorcycle):");
        string vehicleTypeInput = Console.ReadLine();
        VehicleType vehicleType;
        Enum.TryParse(vehicleTypeInput, out vehicleType);

        Vehicle vehicle;
        switch (vehicleType)
        {
            case VehicleType.Car:
                vehicle = new Car();
                break;
            case VehicleType.Truck:
                vehicle = new Truck();
                break;
            case VehicleType.Motorcycle:
                vehicle = new Motorcycle();
                break;
            default:
                Console.WriteLine("Invalid vehicle type!");
                return;
        }

        Spot spot = parkingLot.FindSpot(vehicle);
        if (spot != null)
        {
            Console.WriteLine("Spot found!");
            vehicle.Park();
            spot.IsAvailable = false;
        }
        else
        {
            Console.WriteLine("No available spot for the vehicle.");
        }
    }
}
