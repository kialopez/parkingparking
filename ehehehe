using System;
using System.Collections.Generic;

// Enum for vehicle types
public enum VehicleType
{
    Car,
    Truck,
    Motorcycle
}

// Enum for spot sizes
public enum SpotSize
{
    Compact,
    Regular,
    Large,
    Motorcycle
}

// Class representing a parking spot
public class Spot
{
    public SpotSize Size { get; set; }
    public bool IsAvailable { get; set; }
    public Vehicle Vehicle { get; set; }

    public Spot(SpotSize size)
    {
        Size = size;
        IsAvailable = true;
    }

    public void ParkVehicle(Vehicle vehicle)
    {
        IsAvailable = false;
        Vehicle = vehicle;
    }

    public void ClearSpot()
    {
        IsAvailable = true;
        Vehicle = null;
    }
}

// Base class for all vehicles
public abstract class Vehicle
{
    public VehicleType Type { get; set; }
    public SpotSize Size { get; set; }

    public abstract void Park();
    public abstract void LeaveSpot();
}

// Derived classes for specific vehicle types
public class Car : Vehicle
{
    public string LicensePlate { get; set; }

    public Car(string licensePlate)
    {
        Type = VehicleType.Car;
        Size = SpotSize.Compact;
        LicensePlate = licensePlate;
    }

    public override void Park()
    {
        Console.WriteLine("Car parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Car left the spot.");
    }
}

public class Truck : Vehicle
{
    public Truck()
    {
        Type = VehicleType.Truck;
        Size = SpotSize.Large;
    }

    public override void Park()
    {
        Console.WriteLine("Truck parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Truck left the spot.");
    }
}

public class Motorcycle : Vehicle
{
    public Motorcycle()
    {
        Type = VehicleType.Motorcycle;
        Size = SpotSize.Motorcycle;
    }

    public override void Park()
    {
        Console.WriteLine("Motorcycle parked!");
    }

    public override void LeaveSpot()
    {
        Console.WriteLine("Motorcycle left the spot.");
    }
}

// Class representing a row in a level
public class Row
{
    public List<Spot> Spots { get; set; }

    public Row(int numberOfSpots)
    {
        Spots = new List<Spot>();
        for (int i = 0; i < numberOfSpots; i++)
        {
            Spots.Add(new Spot(SpotSize.Regular));
        }
    }
}

// Class representing a level in the parking lot
public class Level
{
    public List<Row> Rows { get; set; }
    public int AvailableSpots { get; set; }

    public Level(int numberOfRows, int spotsPerRow)
    {
        Rows = new List<Row>();
        for (int i = 0; i < numberOfRows; i++)
        {
            Rows.Add(new Row(spotsPerRow));
        }
        AvailableSpots = numberOfRows * spotsPerRow;
    }
}

// Class representing the parking lot
public class ParkingLot
{
    public List<Level> Levels { get; set; }

    public ParkingLot(int numberOfLevels, int numberOfRows, int spotsPerRow)
    {
        Levels = new List<Level>();
        for (int i = 0; i < numberOfLevels; i++)
        {
            Levels.Add(new Level(numberOfRows, spotsPerRow));
        }
    }

    public Spot FindSpot(Vehicle vehicle)
    {
        foreach (var level in Levels)
        {
            foreach (var row in level.Rows)
            {
                foreach (var spot in row.Spots)
                {
                    if (spot.IsAvailable && CanFit(vehicle.Size, spot.Size))
                    {
                        return spot;
                    }
                }
            }
        }
        return null;
    }

    public void ParkVehicle(Vehicle vehicle, Spot spot)
    {
        if (spot != null)
        {
            spot.ParkVehicle(vehicle);
            UpdateAvailableSpotsCount(-1);
            Console.WriteLine($"{vehicle.Type} parked successfully!");
        }
        else
        {
            Console.WriteLine($"No available spot for the {vehicle.Type.ToLower()}.");
        }
    }

    public void RemoveVehicle(Spot spot)
    {
        if (spot != null && !spot.IsAvailable)
        {
            spot.ClearSpot();
            UpdateAvailableSpotsCount(1);
            Console.WriteLine("Vehicle removed from the spot.");
        }
        else
        {
            Console.WriteLine("Spot is already empty.");
        }
    }

    private bool CanFit(SpotSize vehicleSize, SpotSize spotSize)
    {
        // Logic to determine if the vehicle can fit in the spot...
        // Implement your logic here based on the provided requirements
        return true; // Placeholder return value
    }

    private void UpdateAvailableSpotsCount(int change)
    {
        foreach (var level in Levels)
        {
            level.AvailableSpots += change;
        }
    }

    // Other methods...
}

class Program
{
    static void Main(string[] args)
    {
        // Create parking lot
        Console.WriteLine("Enter the number of levels in the parking lot:");
        int numberOfLevels = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter the number of rows per level:");
        int numberOfRows = int.Parse(Console.ReadLine());

        Console.WriteLine("Enter the number of spots per row:");
        int spotsPerRow = int.Parse(Console.ReadLine());

        ParkingLot parkingLot = new ParkingLot(numberOfLevels, numberOfRows, spotsPerRow);

        // Simulate parking and removing a vehicle
        Console.WriteLine("Enter the type of vehicle (Car, Truck, Motorcycle):");
        string vehicleTypeInput = Console.ReadLine();
        VehicleType vehicleType;
        Enum.TryParse(vehicleTypeInput, out vehicleType);

        switch (vehicleType)
        {
            case VehicleType.Car:
                Console.WriteLine("Enter the license plate of the car:");
                string licensePlate = Console.ReadLine();
                if (!parkingLot.IsLicensePlateUnique(licensePlate))
                {
                    Console.WriteLine("This license plate is already in use. Please enter a unique license plate.");
                    return;
                }
                Car car = new Car(licensePlate);
                Spot spot = parkingLot.FindSpot(car);
                parkingLot.ParkVehicle(car, spot);
                break;
            case VehicleType.Truck:
                Truck truck = new Truck();
                spot = parkingLot.FindSpot(truck);
                parkingLot.ParkVehicle(truck, spot);
                break;
            case VehicleType.Motorcycle:
                Motorcycle motorcycle = new Motorcycle();
                spot = parkingLot.FindSpot(motorcycle);
                parkingLot.ParkVehicle(motorcycle, spot);
                break;
            default:
                Console.WriteLine("Invalid vehicle type!");
                break;
        }

        // Removing a vehicle
        // Assuming user provides spot details for removal
        Console.WriteLine("Enter the level, row, and spot index to remove the vehicle (e.g., 1 2 3):");
        string[] spot

Details = Console.ReadLine().Split(’ ’);
int levelIndex = int.Parse(spotDetails[0]) - 1;
int rowIndex = int.Parse(spotDetails[1]) - 1;
int spotIndex = int.Parse(spotDetails[2]) - 1;

    if (levelIndex < parkingLot.Levels.Count &&
        rowIndex < parkingLot.Levels[levelIndex].Rows.Count &&
        spotIndex < parkingLot.Levels[levelIndex].Rows[rowIndex].Spots.Count)
    {
        parkingLot.RemoveVehicle(parkingLot.Levels[levelIndex].Rows[rowIndex].Spots[spotIndex]);
    }
    else
    {
        Console.WriteLine("Invalid spot details.");
    }
}
